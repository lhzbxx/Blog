<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>重定义</title>
  <subtitle>Redefined</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://lhzbxx.top/"/>
  <updated>2016-09-05T08:14:31.000Z</updated>
  <id>http://lhzbxx.top/</id>
  
  <author>
    <name>lhzbxx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>重新搭建Mac的开发环境及一些吐槽</title>
    <link href="http://lhzbxx.top/2016/09/05/reinstall-mac-steps-and-tsukkomi/"/>
    <id>http://lhzbxx.top/2016/09/05/reinstall-mac-steps-and-tsukkomi/</id>
    <published>2016-09-05T08:14:31.000Z</published>
    <updated>2016-09-05T08:14:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>昨天我的MBP突然就血崩了，真的是猝不及防。</p>
<p>症状如下：能够连接到互联网，DNS、HOSTS、VPN、WiFi均没有任何问题，但是就是无法通过任何官方应用程序中连接到苹果服务器，也就是说，App Store、iCloud、Safari、Simulator的联网功能全部挂掉了。</p>
<p>倒腾了大半天时间，改了无数个配置，还原了一些东西，重启了N次，依旧没有解决这个问题，所以我只能动用终极绝招——彻底重装系统。</p>
<p>但是重装以后各种配置都没了啊，各种安装的东西统统消失了啊！</p>
<p>以前一直想记录自己的开发环境的配置，最好写出来一个自动化的脚本出来，但是一直都懒得做。</p>
<p>今天就记录一下自己的开发环境配置。</p>
<a id="more"></a>
<h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>不管怎么样，我一定要先吐槽一下Mac，或者说是Mac OS X，竟然敢在即将升级到macOS的前两天挂掉！</p>
<p>首先，Mac到底好不好用？</p>
<p>说实话，如果你做iOS开发或者把它当做一个Terminal+Editor，其实Mac还是相当好用的，内存管理的很棒，UI和交互做得非常流畅。</p>
<p>但是。</p>
<p>你不能拿Mac做下面这样的事：</p>
<ol>
<li>观看通过RMTP+Flash实现的网络直播，它会变得超超超级烫手。</li>
<li>部署大量（&gt;3个）的服务，它真的、真的会变得超卡，UI都会有明显卡顿。</li>
<li>做iOS开发时候插各种iPhone，分分钟吃掉30G+的存储空间。</li>
</ol>
<p>我还遇到过同样诡异的bug，就是通知消息卡住，而且Fn组合键全都失效。</p>
<p>所以，结论是：MBP对我来说就是一个Terminal+Editor+iOS Develop Environment。</p>
<h2 id="开发环境"><a href="#开发环境" class="headerlink" title="开发环境"></a>开发环境</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><ul>
<li>iTerm2，终端利器，不解释了。</li>
<li>Xcode，必要的开发环境。</li>
<li>Chrome，除了Coding另外50%的时间应该在这上面了。</li>
<li>JetBrains系列，IntelliJ IDEA Ultimate、AppCode和Android Studio。</li>
<li>Dash，离线查看文档用，虽然我很少用。</li>
<li>Code Runner，简单的测试代码能否跑通。</li>
<li>Charles，抓包工具，非常实用！</li>
<li>Paw3，测试、查看API很有用！</li>
<li>SourceTree，Git GUI工具，有时候查看diff和文件status比较方便。</li>
<li>Sketch，查看设计搞&amp;导出3X图片。</li>
<li>Sublime Text，编辑器啊！</li>
<li>网易云音乐，听歌啊。</li>
<li>微信，虽然我不太想用，但周围人都在用。</li>
<li>mpv，视频播放器，可以配合CLI使用。</li>
</ul>
<h3 id="CLI"><a href="#CLI" class="headerlink" title="CLI"></a>CLI</h3><ul>
<li>Git，没有它我活不下去！</li>
<li>Python3<ul>
<li>pip</li>
<li>iPython</li>
<li>Django</li>
<li>you-get</li>
</ul>
</li>
<li>NPM<ul>
<li>Hexo</li>
<li>Ionic</li>
<li>React Native</li>
<li>Vue</li>
<li>GitBook</li>
<li>PSI（检测网页）</li>
<li>Gulp</li>
</ul>
</li>
<li>Composer<ul>
<li>Lumen</li>
</ul>
</li>
<li>JDK</li>
</ul>
<h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><ul>
<li>Xcode插件<ul>
<li>Allatraz</li>
<li>SCXcodeSwitchExpander</li>
<li>Swimat</li>
<li>RealmBrowser</li>
</ul>
</li>
<li>Sublime Text插件</li>
<li>JetBrains插件</li>
<li>Android Studio插件</li>
<li>Paw3插件</li>
</ul>
<h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><ul>
<li>Vim</li>
<li>Git<ul>
<li><code>git config --global user.name &quot;lhzbxx&quot;</code></li>
<li><code>git config --global user.email &quot;lhzbxx@gmail.com&quot;</code></li>
</ul>
</li>
</ul>
<h3 id="CLI工具"><a href="#CLI工具" class="headerlink" title="CLI工具"></a>CLI工具</h3><ul>
<li>GitBook</li>
<li>Lumen</li>
<li>Django</li>
<li>Hexo</li>
<li>Pandoc</li>
<li>Graphviz</li>
<li>ImageMagick</li>
<li>Aria2c</li>
<li>QuickLookin-Plugins<ul>
<li>qlcolorcode</li>
<li>qlstephen</li>
<li>qlmarkdown</li>
<li>quicklook-json</li>
</ul>
</li>
</ul>
<h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p><code>ruby -e &quot;$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)&quot;</code></p>
<p><code>xcode-select --install</code></p>
<p><code>brew cask install google-chrome</code></p>
<p><code>brew cask install sublime-text</code></p>
<p><code>brew cask install typora</code></p>
<p><code>brew cask install sketch</code></p>
<p><code>brew install cocoapods</code></p>
<p><code>brew install carthage</code></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天我的MBP突然就血崩了，真的是猝不及防。&lt;/p&gt;
&lt;p&gt;症状如下：能够连接到互联网，DNS、HOSTS、VPN、WiFi均没有任何问题，但是就是无法通过任何官方应用程序中连接到苹果服务器，也就是说，App Store、iCloud、Safari、Simulator的联网功能全部挂掉了。&lt;/p&gt;
&lt;p&gt;倒腾了大半天时间，改了无数个配置，还原了一些东西，重启了N次，依旧没有解决这个问题，所以我只能动用终极绝招——彻底重装系统。&lt;/p&gt;
&lt;p&gt;但是重装以后各种配置都没了啊，各种安装的东西统统消失了啊！&lt;/p&gt;
&lt;p&gt;以前一直想记录自己的开发环境的配置，最好写出来一个自动化的脚本出来，但是一直都懒得做。&lt;/p&gt;
&lt;p&gt;今天就记录一下自己的开发环境配置。&lt;/p&gt;
    
    </summary>
    
      <category term="随想录" scheme="http://lhzbxx.top/categories/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
      <category term="备忘" scheme="http://lhzbxx.top/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="个人经历" scheme="http://lhzbxx.top/tags/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
  <entry>
    <title>art_party_function_design</title>
    <link href="http://lhzbxx.top/2016/08/25/art-party-function-design/"/>
    <id>http://lhzbxx.top/2016/08/25/art-party-function-design/</id>
    <published>2016-08-25T06:12:49.000Z</published>
    <updated>2016-08-25T06:12:49.000Z</updated>
    
    <content type="html"><![CDATA[<p>（未完成）</p>
<p>「」</p>
<a id="more"></a>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（未完成）&lt;/p&gt;
&lt;p&gt;「」&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>develop_lab_server_experience_part1</title>
    <link href="http://lhzbxx.top/2016/08/25/develop-lab-server-experience-part1/"/>
    <id>http://lhzbxx.top/2016/08/25/develop-lab-server-experience-part1/</id>
    <published>2016-08-25T06:02:03.000Z</published>
    <updated>2016-08-25T06:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>（未完成）</p>
<p>「」</p>
<a id="more"></a>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（未完成）&lt;/p&gt;
&lt;p&gt;「」&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>my-days-on-github-last-3-months</title>
    <link href="http://lhzbxx.top/2016/08/14/my-days-on-github-last-3-months/"/>
    <id>http://lhzbxx.top/2016/08/14/my-days-on-github-last-3-months/</id>
    <published>2016-08-13T16:09:01.000Z</published>
    <updated>2016-08-13T16:09:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>（未完成）</p>
<p>「」</p>
<a id="more"></a>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;（未完成）&lt;/p&gt;
&lt;p&gt;「」&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一次在AWS-EC2上部署PPTP-VPN的经历</title>
    <link href="http://lhzbxx.top/2016/08/12/aws-deploy-pptp-vpn/"/>
    <id>http://lhzbxx.top/2016/08/12/aws-deploy-pptp-vpn/</id>
    <published>2016-08-12T09:45:05.000Z</published>
    <updated>2016-08-12T09:45:05.000Z</updated>
    
    <content type="html"><![CDATA[<p>之前和我一直聊得热乎的妹子回国了，已经习惯于肉身翻墙的她自然到处寻找靠谱的VPN。</p>
<p>在公司里有一个阿里云在香港的Windows主机弄的PPTP-VPN，自己也想买一台，结果发现，太TM的贵了啊——有没有热心的水友告诉我，啥时候阿里云变得这么吃人了，看了一下最低配+按流量收费打了折竟然都要1700+RMB。天了噜，还有没有天理了。国外这样的配置也就$4.99*12吧。</p>
<p>然后妹子用她的信用卡帮我免费申请了一个AWS的账号，可以用一年免费的EC2.</p>
<p>就可以愉快地搭建VPN啦！</p>
<a id="more"></a>
<p>话说翻墙的技术倒是挺多的，我自己用的GoAgent，当然最靠谱的还是VPN了，稳定、流量大、不用为IP发愁。</p>
<h2 id="AWS设置"><a href="#AWS设置" class="headerlink" title="AWS设置"></a>AWS设置</h2><p>首先是进入AWS的控制台咯。</p>
<p>主要有两点：</p>
<ol>
<li>选择数据中心，我当时就近选了首尔。</li>
<li>选择镜像、生成pem文件。</li>
<li>绑定弹性IP。</li>
<li>创建安全组，开放TCP的1723端口。</li>
</ol>
<p>值得一提的是，EC2主机的终止就相当于销毁了。</p>
<h2 id="安装PPTP"><a href="#安装PPTP" class="headerlink" title="安装PPTP"></a>安装PPTP</h2><p>sudo apt-get install pptpd</p>
<p>sudo vi /etc/pptpd.conf</p>
<p>localip 192.168.0.1<br>remoteip 192.168.0.234-238,192.168.0.245</p>
<p>sudo vi /etc/ppp/pptpd-options</p>
<p>ms-dns 8.8.4.4<br>ms-dns 8.8.8.8</p>
<p>/etc/ppp/chap-secrets</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前和我一直聊得热乎的妹子回国了，已经习惯于肉身翻墙的她自然到处寻找靠谱的VPN。&lt;/p&gt;
&lt;p&gt;在公司里有一个阿里云在香港的Windows主机弄的PPTP-VPN，自己也想买一台，结果发现，太TM的贵了啊——有没有热心的水友告诉我，啥时候阿里云变得这么吃人了，看了一下最低配+按流量收费打了折竟然都要1700+RMB。天了噜，还有没有天理了。国外这样的配置也就$4.99*12吧。&lt;/p&gt;
&lt;p&gt;然后妹子用她的信用卡帮我免费申请了一个AWS的账号，可以用一年免费的EC2.&lt;/p&gt;
&lt;p&gt;就可以愉快地搭建VPN啦！&lt;/p&gt;
    
    </summary>
    
      <category term="玩具实验室" scheme="http://lhzbxx.top/categories/%E7%8E%A9%E5%85%B7%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="备忘" scheme="http://lhzbxx.top/tags/%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>「半神」概念设计</title>
    <link href="http://lhzbxx.top/2016/07/28/demigod-conceptual-design/"/>
    <id>http://lhzbxx.top/2016/07/28/demigod-conceptual-design/</id>
    <published>2016-07-27T17:38:57.000Z</published>
    <updated>2016-07-27T17:38:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>话说，我在建立这个博客网站的时候，当时的想法只是发布自己的一些构建软件或服务的流程和心得来做备忘和分享，顺便会发布一些自己设计的幻想框架，并尝试补全它们，用故事更好地描述脑海中的天马行空。但是感觉自己的拖延症确实到达一个境界了，特别是多线程、高并发地处理各种自己挖的坑，还要看许多干货，并且有计划补全一些之前没有接触或粗略地忽视了的技术细节和知识体系。</p>
<p>幻想故事却迟迟没有上架，噗噗！</p>
<p>不过自己挖的坑，含着泪也要填完！</p>
<p>当然，其实之前也有很多自认为很精彩的设计，不过就不一下子放出来了，保持神秘感，嘻嘻~</p>
<p>所以，这一次，就先介绍一下最近构建的「半神」。</p>
<a id="more"></a>
<h2 id="起源"><a href="#起源" class="headerlink" title="起源"></a>起源</h2><h3 id="Demigod"><a href="#Demigod" class="headerlink" title="Demigod"></a>Demigod</h3><p>「半神」英文名为「Demigod」，实际上，这是我小时候玩过的一款当时并不称作MOBA的MOBA类游戏，当时沉迷了一段时间。</p>
<img src="/2016/07/28/demigod-conceptual-design/demigod-wallpaper-1920x1080.jpg" alt="[半神·Demigod]" title="[半神·Demigod]">
<p>图中所示是游戏中的一名英雄，也是最具有代表性的英雄（喂喂，这个游戏里只有10名英雄！），名为「岩塔战神」，非常适合新手入门，简单粗暴而又强力，因为它的技能是三个可以升级的被动，就是它背部的三座塔，而主动技能则是放置塔和吞噬建筑，可以说全自动输出，只需要奶奶奶就OK了。</p>
<p>咳咳，有点扯远了，这不是游戏攻略！</p>
<p>之所以起这个名字，其实也不是和这款游戏有多大的相关性，只是借用了这个名词，讲述的是另一种概念，仅仅作为自己对童年的怀念吧。</p>
<h3 id="克苏鲁"><a href="#克苏鲁" class="headerlink" title="克苏鲁"></a>克苏鲁</h3><p>说实话，其实我之前基本没有看过洛夫克拉夫特的系列小说，对于「克苏鲁神话」体系本身，仅仅是谜一般的对逼格的向往和隐隐约约自洽性体系构建的偏好，以及被那些受克苏鲁文化影响的电视剧或小说作品的熏陶，其实对克苏鲁本身也有一定的理解。比如说「True Detective」里的“The King in Yellow”，简直是有趣到恣意把玩而不腻味。</p>
<p>所以这个体系的构建也或多或少地被克苏鲁所影响了。</p>
<p>但其实，我表达的理念和洛夫克拉夫特相差甚远。</p>
<p>洛夫克拉夫特认为：</p>
<blockquote class="blockquote-center"><p>我认为，人的思维缺乏将已知事物联系起来的能力，这是世上最仁慈的事了。人类居住在幽暗的海洋中一个名为无知的小岛上，这海洋浩淼无垠、蕴藏无穷秘密，但我们并不应该航行过远，探究太深。——洛夫克拉夫特，《克苏鲁的呼唤》</p>
</blockquote>
<p>所以，他的整个神话体系是无秩序的、黑暗向的、充满神秘感的。</p>
<p>而我，想要表达的是一个假想的、客观的、又带有世俗的哲学思考，比如三原神的设计，其实对我自己来说并不新鲜，我之前也有过类似的设计。</p>
<p>话不多说，下面就介绍具体的概念设计。</p>
<h2 id="概念设计"><a href="#概念设计" class="headerlink" title="概念设计"></a>概念设计</h2><h3 id="三原神"><a href="#三原神" class="headerlink" title="三原神"></a>三原神</h3><p>三原神：混沌、光、纯粹。</p>
<p>混沌：最古老的真神、万物之源、不可被描述的存在，也是一切的起源，混沌代表了最为原始的状态，当混沌消失，迸发出无穷无尽的规则和力量，从而孕育了第二原神，即为光。没有人能够观想出混沌的形象，如果用凡间的词汇形容它，那就是无穷无尽的虚空。它无处不在，却又毫无踪迹，处于超越一切的时空之外。混沌没有起源，也没有结束，因为没有时间能够约束它；同时它也是不可描述的，因为“存在”本身，就是混沌“消失”后才诞生的概念。</p>
<p>光：宇宙规则的继承者、执法者之祖、时间与空间的管理者，从“历史”的角度来说，光才是第一位原神，他是一切物理规则的制定者和掌控者，任何在现实世界中的物质都要遵从光的意志。光只作为造物的观察者和监督者的身份而存在，从不干涉宇宙中的事务。</p>
<p>纯粹：亿万神明之神、不可被信仰的信仰之神、真实梦境的管理者。在光的时间与空间的集合中，漫漫长河洗礼之下，一种新的形态开始孕育，即为生命体。纯粹诞生于第一个生命体的萌芽，从某颗超巨星核心的剧烈爆炸中苏醒，并寄生于初始的肉身而成长起来，最终吞噬了整颗恒星——纯粹是三原神中唯一一个受制于时间的真神，同时也是唯一一个拥有具体形态、且可以复制与成长的真神。它为现实世界扩展了规则，并创建了真实梦境的维度，同时播种了自己的神格，故被称为亿万神明之神。但纯粹虽然为信仰之神，但却无法被观想，任何妄图描绘纯粹的形态的肉体都会被瞬间湮灭。</p>
<p>三这个概念在传统中的含义就不多提了，阐述的意味其实就是一生二，二生三，三生万物这样的富有中国特色的自然规律。</p>
<p>而这三个神虽然都被称为“原神”，但其实他们可以被视作是三代不同的“存在”。混沌其实从现代物理观来看，就是所谓的大爆炸理论中的“奇点”，或者说是“太初”。而光，则代表着“所有时间空间物质的总和”，亦即《淮南子》中所叙述的“往古来今谓之宙，四方上下谓之宇”。在神话体系中，光是一切的规则，代表着三维世界中的铁律，而光本身，则是超越三维世界的观察者。第三代神名为“纯粹”，其实也就意味着它的存在是可被读的、也是可被写的，它化身亿万，企图将意志延伸到宇宙的每处边缘，并且自创了超越宇宙的另一个维度的世界。所以，也可以说，纯粹才是生命体的始祖，它是最古老的“分布式”智能，但同时也具有非集中式管理的缺陷——那就是它无法掌控自己的每一个触角，这同时也导致了邪神的诞生，故事便起源于此。</p>
<p>说一句题外话，不得不说洛夫克拉夫特创造的“章鱼”和“触手”的形态设计是非常厉害的，因为我也实在想不到有什么更贴切的形象去表述纯粹所应有的姿态。</p>
<h3 id="游牧人、邪神和半神"><a href="#游牧人、邪神和半神" class="headerlink" title="游牧人、邪神和半神"></a>游牧人、邪神和半神</h3><p>游牧人：灵魂工程师、游荡在星际的牧人、神王的具象化身、神格的播种者，游牧人是纯粹的化身，它在星际之中漫游，并为已孕育出生命体的星球播撒神格，为他们带来了信仰。</p>
<p>半神：被限制在肉体中的神，亦或是被称为拥有神格的生命体。</p>
<p>邪神：游牧人堕落后，被负面情绪所感染，力量不受控制地向创造和复苏的反面——毁灭与破坏而倾斜，它们往往挣脱生命体本身的桎梏，成为幻象中代表着疯狂与黑暗的元素拼凑的具象。邪神拥有甚至超越游牧人本身的力量，它们往往对其它生命体普遍怀有强烈的恶意。</p>
<p>从时间轴的维度上来说，游牧人就是纯粹的化身，它散播神格，将意志的源头、生命体的雏形、宿命的起点传递到宇宙中的各处。但是在这一过程中，出现了一些岔子。游牧人、或者说就是纯粹本身的意图是更多地复制自我，并让它们在不同环境中成长起来，繁荣整个宇宙，并且实现自己的真实梦境的“造物”的大工程计划（这也是称游牧人为工程师的一种解释）。</p>
<p>所以，半神是游牧人所想要的造物结果，然而其中却出现了邪神。</p>
<p>后续的一切便不受纯粹所控制的了，这也导致了真实梦境的污染。</p>
<h3 id="肉身、精神体与法则"><a href="#肉身、精神体与法则" class="headerlink" title="肉身、精神体与法则"></a>肉身、精神体与法则</h3><p>肉身：从宇宙规则中诞生的生命体，即现实世界中的躯壳，灵魂的容器。</p>
<p>精神体：即灵魂本身。</p>
<p>熔炉、梦境与潮汐法则：这三条法则是纯粹对现世的扩展规则。一是灵魂可以燃烧，并爆发出最猛烈的能量；二是日夜不仅带来明暗和引力的变化，同时会使生命体进入规律的起伏状态；三是灵魂在梦境与现世的交替之中，会如同潮汐一样释放出能量。</p>
<p>前面提到了，纯粹是唯一一个具象化的原神，虽然不可被观想，但智慧生命体对其较为准确的描述确是统一的“游弋在宇宙中的触手”和“亿万神明之神”。真实梦境虽然是非理性、抛弃了宇宙规则的世界，但它和真实世界的纽带却是一种“混合的规则”，那就是三大法则：熔炉、梦境与潮汐法则。</p>
<p>不过，还有一个有趣的问题，那就是人类作为地球上的第一代高智慧文明，这些凡人们是如何诞生的？那些茫茫多的、缺少神格、仅仅有微弱的灵魂的肉身是如何演化出来的？</p>
<p>事实上，是一切的根源——纯粹本身的属性所决定的。因为纯粹“可读”的属性，复制意志的本质其实是将其源头的信息序列化、并重写在其它载体上的结果，必然导致它的意志是会丢失的。而前面提到过，纯粹在宇宙中的存在实际上是受制于光的法则的，起码无法逃脱时间和空间的约束——这也就导致了在漫漫传播的过程中，神格的降级乃至丢失。而地球上的高智慧文明——人类，已经与纯粹大相背离，发展出的集中式智能与分布式差别极大，不兼容的情况愈加严重，信息丢失也就越来越多，在数十亿年的演化进程中，神格的觉醒成为了极小概率的事件。</p>
<p>此外，另一个值得探讨的问题是，神格到底是什么，它为何会展现出如此完全不同的形态。</p>
<p>神格的实质依旧是灵魂，即精神体——实际上，神格的威能主要还是体现在真实梦境之中。神格的形态与真实梦境密切相关，而在真实梦境中，世界的构建是随机和无序的，这也就导致了，孕育神格的环境实际上是不可预知的，也无法用现世中的物理规则所推测。只有神格释放，生成魔域的时候，才能在现世中初露端倪。</p>
<h3 id="梦境、魔域与遗民"><a href="#梦境、魔域与遗民" class="headerlink" title="梦境、魔域与遗民"></a>梦境、魔域与遗民</h3><p>梦境：分为表征梦境和真实梦境，表征梦境是人类独有的幻想产物，借由物质世界中的物理规则和经历构筑的产物。而真实梦境是由古神所创造的精神世界，极少数人类可以褪去理性的外衣，回归灵魂的本质而被引导或直接进入真实梦境。</p>
<p>魔域：当神格寄生体释放出蕴含的巨大能量时，往往能造成真实梦境与现世的扭曲，导致真实梦境对现世造成违背理性和物理规则的影响。</p>
<p>遗民：没有灵魂的人类，亦不受宿命的牵连。是地球上一种特殊的存在，他们的始祖是代表着“恶性滋生”的大邪神“黑母羊”，它们的形态不断进化，却永远不会消亡。他们被赋予或者说被植入了唯一的、且不同的执念。遗民对于半神有着极强的杀伤力，因为他们不会被拖入魔域之中，同时他们拥有最完美的进化形态——摒弃了几乎所有生物特性上的缺点。</p>
<h2 id="故事线"><a href="#故事线" class="headerlink" title="故事线"></a>故事线</h2><p>概念设计就先介绍到这里，虽然只是其中的一部分，但是也基本上表达出了我要构建的神话体系。</p>
<p>整个故事的脉络自然脱离不了半神之间的争斗。</p>
<p>暂时考虑有三条线吧，一是黑母羊的遗民宿命线、二是半神“冥府之握”的无限魔域大统治线、三是太古蛮荒复苏线。</p>
<p>OK，就这样吧，暂时写到这里。下一篇大概就是人物设计喽！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;话说，我在建立这个博客网站的时候，当时的想法只是发布自己的一些构建软件或服务的流程和心得来做备忘和分享，顺便会发布一些自己设计的幻想框架，并尝试补全它们，用故事更好地描述脑海中的天马行空。但是感觉自己的拖延症确实到达一个境界了，特别是多线程、高并发地处理各种自己挖的坑，还要看许多干货，并且有计划补全一些之前没有接触或粗略地忽视了的技术细节和知识体系。&lt;/p&gt;
&lt;p&gt;幻想故事却迟迟没有上架，噗噗！&lt;/p&gt;
&lt;p&gt;不过自己挖的坑，含着泪也要填完！&lt;/p&gt;
&lt;p&gt;当然，其实之前也有很多自认为很精彩的设计，不过就不一下子放出来了，保持神秘感，嘻嘻~&lt;/p&gt;
&lt;p&gt;所以，这一次，就先介绍一下最近构建的「半神」。&lt;/p&gt;
    
    </summary>
    
      <category term="幻想故事" scheme="http://lhzbxx.top/categories/%E5%B9%BB%E6%83%B3%E6%95%85%E4%BA%8B/"/>
    
    
      <category term="半神" scheme="http://lhzbxx.top/tags/%E5%8D%8A%E7%A5%9E/"/>
    
  </entry>
  
  <entry>
    <title>「L&amp;B」功能设计</title>
    <link href="http://lhzbxx.top/2016/07/27/lend-and-borrow-function-design/"/>
    <id>http://lhzbxx.top/2016/07/27/lend-and-borrow-function-design/</id>
    <published>2016-07-27T14:47:27.000Z</published>
    <updated>2016-07-27T14:47:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>说实话，一开始让我发布这篇Blog，我是拒绝的。</p>
<p>因为这个项目的名字实在是没有想好，我只能暂时取一个很low的名字，而且很可能起码会在工程上一直延续使用这个名字。</p>
<p>L&amp;B is short for <code>lend and borrow</code>.</p>
<p>这是和室友一次在一家兰州拉面馆中想到的主意——隐隐约约有成为维♂系关系（大雾）的纽带。</p>
<p>这次我将会以QA的形式来介绍这个项目。</p>
<a id="more"></a>
<ul>
<li>我们要做什么？</li>
</ul>
<p>一个线上发起租借请求，线下进行交易，同时担保双方利益的平台。</p>
<p>从某些方面来说，有些类似于阿里巴巴旗下的闲鱼，主要呈现在手机端，提供用户的交流和操作。</p>
<ul>
<li>为什么要做这个？</li>
</ul>
<p>有一次，当我刚搬了新的公寓，想在家里安装一个东西，但是需要电钻的时候，因为和周边的邻居都不认识，也不知道谁会有电钻这个东西。但又不可能为了临时安装这个东西去在网上选购一个电钻，所以就萌发了做一个这样的平台的想法。</p>
<img src="/2016/07/27/lend-and-borrow-function-design/IMG_20160723_114600_HDR.jpg" alt="[单杠，一切的起源]" title="[单杠，一切的起源]">
<p>而有些搞笑的事——在将这个单杠搁置了两个星期后，偶然间我要评价奶茶东上的订单时候，我惊奇的发现——这个单杠的安装，完！全！不！需！要！电！钻！</p>
<p>但是做了就做了，我还是觉得这个项目非常有趣的。</p>
<ul>
<li>做这个项目的其它目的？</li>
</ul>
<p>因为室友是一个立志成为Android大牛的开发工程师，所以基本上Android端的制作就交给他了，我来做iOS端和后端的一些东西。</p>
<p>而我将尝试一套非常传统的技术栈，那就是Spring+Hibernate作为REST API后端服务，并且尝试引用一些类似于Swagger2、Druid、JWT、AMP、AOP之类的之前没有接触过的东西。</p>
<p>算是锻炼自己吧，哈哈！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;说实话，一开始让我发布这篇Blog，我是拒绝的。&lt;/p&gt;
&lt;p&gt;因为这个项目的名字实在是没有想好，我只能暂时取一个很low的名字，而且很可能起码会在工程上一直延续使用这个名字。&lt;/p&gt;
&lt;p&gt;L&amp;amp;B is short for &lt;code&gt;lend and borrow&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;这是和室友一次在一家兰州拉面馆中想到的主意——隐隐约约有成为维♂系关系（大雾）的纽带。&lt;/p&gt;
&lt;p&gt;这次我将会以QA的形式来介绍这个项目。&lt;/p&gt;
    
    </summary>
    
      <category term="填坑记" scheme="http://lhzbxx.top/categories/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="L&amp;B" scheme="http://lhzbxx.top/tags/L-B/"/>
    
  </entry>
  
  <entry>
    <title>「情书」的制作（第一版）</title>
    <link href="http://lhzbxx.top/2016/07/27/love-letter-realization-version-1/"/>
    <id>http://lhzbxx.top/2016/07/27/love-letter-realization-version-1/</id>
    <published>2016-07-27T14:27:44.000Z</published>
    <updated>2016-07-27T14:27:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>「情书」是一个非常有趣的桌面游戏。</p>
<p>之前花了大概15块软妹币买的盗版，如果没记错的话，应该是和小白世纪、瘟疫危机和诈赌巫师一起买来的。但是每个游戏都尝试了一遍后，发现最耐玩的竟然是这个只有16张纸牌组成的游戏！</p>
<p>规则设计的十分巧妙，简单而富有乐趣，让人充满了“策略感”。我认为从桌游设计上来说，这个游戏是非常厉害的，BGG上的排名其实也说明了一切。这套牌也有一系列衍生的艺术作品，不过这里就不延伸了。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>首先提供一个链接吧。</p>
<p>英文规则书下载：<a href="/2016/07/27/love-letter-realization-version-1/Love_Letter_Rules_Final.pdf" title="[Love Letter Rules]">[Love Letter Rules]</a></p>
<p>神马？你说中文的规则？这个就自己Google了好伐，网上还是蛮多资源的，甚至还有DIY的素材。</p>
<p>到写这篇博客的时候，我实际上已经完成了第一版的制作。</p>
<p>下面简单说一些思路和感想。</p>
<h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>其实在制作第一版之前，有一个类似「Tracer Bullet」的试验品，使用「Flask」作为REST API来实现前后端的通信。</p>
<p>但是实在是太麻烦了，虽说写API倒还好，但涉及到前端的时候，感觉完全无法动手。一来REST作为无状态协议，本身维护客户端的状态就很吃力，二来前端每次都要主动拉取服务端处理的结果，非常麻烦，更何况桌面游戏一般都是两个人以上参与的。</p>
<p>所以现在主要以「Socket.io」作为主要组件进行实现，有点类似于有限状态机的意味，状态的转移通过客户端与服务器建立的套接字实现。</p>
<p>服务端主要作为计算流程和对结果的处理通知，客户端主要作为信息传递和展示的平台，同时辅以一些简单的限制来减轻服务器（代码上）的压力，一个实例是，实现女伯爵的卡片限制的时候，服务器其实蛮难处理这件事的，但客户端却非常容易实现。</p>
<p>在服务端，主要用Redis来存储临时的状态，比如牌库、玩家状态和手牌信息。</p>
<p>因为是用Node来进行实现，服务端里基本上都是成片成片的函数，利用回调处理结果。</p>
<h2 id="不足和隐患"><a href="#不足和隐患" class="headerlink" title="不足和隐患"></a>不足和隐患</h2><p>我觉得Socket.io+Node这个技术栈本身是没什么问题的，主要问题在于写法上。</p>
<p>就是传说中的Callback Hell。</p>
<p>其实一开始这个问题并不明显。</p>
<p>直到我手贱加入了三个功能：</p>
<ol>
<li><p>所有玩家准备好后，等待10秒开始游戏，如果有玩家退出，则重新计时。</p>
</li>
<li><p>如果牌局上仅有一名玩家没有准备，则等待10秒后强制玩家准备。</p>
</li>
<li><p>观战系统。</p>
</li>
</ol>
<p>天了噜，从此我的代码中就是各种callback和大括号了。</p>
<p>其次还有一个小小的隐患是，在CS通信的时候，没有设定消息序列，没有对乱序进行处理的机制——虽然我也没有仔细考虑其中的问题，不过毕竟是一个小东西，所以暂时不考虑了。</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>说一下接下来改良的思路吧。</p>
<ol>
<li><p>首先实现模块化，一大坨一大坨的函数虽然写的时候还算顺畅，但写完之后真的有点「在人群中淹没，不知所措」的感觉。</p>
</li>
<li><p>改进回调，使用Promise。</p>
</li>
</ol>
<p>OK，就这样啦！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「情书」是一个非常有趣的桌面游戏。&lt;/p&gt;
&lt;p&gt;之前花了大概15块软妹币买的盗版，如果没记错的话，应该是和小白世纪、瘟疫危机和诈赌巫师一起买来的。但是每个游戏都尝试了一遍后，发现最耐玩的竟然是这个只有16张纸牌组成的游戏！&lt;/p&gt;
&lt;p&gt;规则设计的十分巧妙，简单而富有乐趣，让人充满了“策略感”。我认为从桌游设计上来说，这个游戏是非常厉害的，BGG上的排名其实也说明了一切。这套牌也有一系列衍生的艺术作品，不过这里就不延伸了。&lt;/p&gt;
    
    </summary>
    
      <category term="开发手札" scheme="http://lhzbxx.top/categories/%E5%BC%80%E5%8F%91%E6%89%8B%E6%9C%AD/"/>
    
    
      <category term="LoveLetter" scheme="http://lhzbxx.top/tags/LoveLetter/"/>
    
  </entry>
  
  <entry>
    <title>「Sander」功能设计</title>
    <link href="http://lhzbxx.top/2016/07/27/sander-function-design/"/>
    <id>http://lhzbxx.top/2016/07/27/sander-function-design/</id>
    <published>2016-07-27T14:12:20.000Z</published>
    <updated>2016-07-27T14:12:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的产品设计上出现了一些分歧，然后弃用了一些之前的设计。</p>
<p>不过我倒觉得之前的设计还算可以，只是有些需要改进的地方。</p>
<p>╮(╯▽╰)╭</p>
<p>所以我决定把这个部分的设计抽离出来，并做成一个小平台式的东西。</p>
<p>「Sander」就是我为这个小平台取的名字。寓意其实很简单啦：因为这个平台的设计和用途和当今最火的、也是剁掉无数男人双手的游戏分发平台「Steam」有些相似。</p>
<a id="more"></a>
<h2 id="Sander"><a href="#Sander" class="headerlink" title="Sander"></a>Sander</h2><p>「Steam」的主要作用当然就是购买游戏，但同时它也依托于玩家的数据信息，成为一个非常棒的游戏推荐引擎，玩家总是能通过它的推荐实现不断剁手（大雾）。</p>
<p>而「Sander」的主要作用，其实是制定日程，但它的数据源可以是专业的第三方，也就是俗称的订阅号或者服务号之类的概念，也可以是其他用户提供的公共事件，用户可以手动添加“源”，并根据源信息提供的建议日程，从而定制自己的专属表。</p>
<p>当然，基于RFC-5545协议，「Sander」也是极易拓展的。</p>
<p>例如邀请、预约其他用户参加会议、活动或是集成第三方的日历。</p>
<p>但那大概是很久之后要考虑的事情了吧，毕竟那是很无聊的事情，除非有人说服我，啊哈哈哈。</p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><p>所以，现阶段的话，「Sander」主要用来做下面的事情：</p>
<ol>
<li><p>提供第三方源的制作和发布平台。</p>
</li>
<li><p>提供日程的推荐队列。</p>
</li>
</ol>
<p>OK，就是这两个功能。</p>
<p>至于LBS？</p>
<p>呃，好吧好吧，感觉还是要加入的，毕竟RFC-5545里有place属性不是？</p>
<h2 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h2><p>说点题外话，最近用「Spring」框架做「L&amp;B」的后台，实在是蛋疼死我了。所以这次我决定快速开发出原型，就用「Django」好了。</p>
<p>哈哈，是不是顺便省了一篇技术选型之类的文章。</p>
<p>不过推荐引擎还是要仔细考虑一下的，可能会用「Spark」来做吧。</p>
<p>至于详细的，下篇文章见吧！</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近公司的产品设计上出现了一些分歧，然后弃用了一些之前的设计。&lt;/p&gt;
&lt;p&gt;不过我倒觉得之前的设计还算可以，只是有些需要改进的地方。&lt;/p&gt;
&lt;p&gt;╮(╯▽╰)╭&lt;/p&gt;
&lt;p&gt;所以我决定把这个部分的设计抽离出来，并做成一个小平台式的东西。&lt;/p&gt;
&lt;p&gt;「Sander」就是我为这个小平台取的名字。寓意其实很简单啦：因为这个平台的设计和用途和当今最火的、也是剁掉无数男人双手的游戏分发平台「Steam」有些相似。&lt;/p&gt;
    
    </summary>
    
      <category term="填坑记" scheme="http://lhzbxx.top/categories/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="Sander" scheme="http://lhzbxx.top/tags/Sander/"/>
    
  </entry>
  
  <entry>
    <title>「Git Book」读后感（未完成）</title>
    <link href="http://lhzbxx.top/2016/07/06/git-book-read-review/"/>
    <id>http://lhzbxx.top/2016/07/06/git-book-read-review/</id>
    <published>2016-07-06T10:19:01.000Z</published>
    <updated>2016-07-06T10:19:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>其实用了Git这么久，从当初比较痛苦的看各种Git Flow入门，再到后来自己亲自尝试发现并没有很复杂——在这个过程中，我对Git的本质的理解都源于自身的实践。但是我感觉这是不对的，还是有必要对Git的实现做一些了解，毕竟自己的大型TODO列表中有一个文档中心的设计，还是需要版本控制系统的支持的。再加上最近了解到Google的巨型版本控制系统，所以对VCS的实现产生了一些兴趣。</p>
<p>于是我就翻出来了这本「Git Book」来看了看。</p>
<p>当然，这本书并没有详细描述Git本身具体是怎么构建的，但介绍了很多重要的概念和原理。在此总结一下，为以后的工作做个铺垫。</p>
<a id="more"></a>
<h2 id="一些概念"><a href="#一些概念" class="headerlink" title="一些概念"></a>一些概念</h2><h3 id="Git模型"><a href="#Git模型" class="headerlink" title="Git模型"></a>Git模型</h3><ul>
<li>所有文件都是通过SHA1哈希计算后的40-digit对象名来索引的。</li>
<li>对象包括：类型，大小和内容。</li>
<li>对象的四种类型： blob，tree，commit，tag。</li>
<li>blob：文件的全部内容。</li>
<li>tree：一串条目，表达目录层次。</li>
<li>commit：指向root of trees，并带有相关的描述信息。</li>
<li>tag：标签对象包括一个对象名，对象类型，标签名和标签创建人。</li>
</ul>
<h3 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h3><ul>
<li>Git目录，就是工程文件的根目录下的.git目录。</li>
<li>Git目录包括HEAD，config，description，hooks，index，logs，objects，refs。</li>
<li>logs存储各个refs的历史信息。</li>
<li>objects存储本地仓库的所有对象。</li>
<li>refs标识项目里每个分支指向了哪个提交。</li>
</ul>
<h3 id="工作目录"><a href="#工作目录" class="headerlink" title="工作目录"></a>工作目录</h3><ul>
<li>存储checkout编辑的文件。</li>
<li>分支切换时，工作目录文件会经常被替换和删除。</li>
<li>历史信息保存在Git目录中。</li>
</ul>
<h3 id="Git索引"><a href="#Git索引" class="headerlink" title="Git索引"></a>Git索引</h3><ul>
<li>在工作目录和项目仓库之间的暂存区，即staging area。</li>
<li>被暂存（位于Git索引中），修改但未暂存，没有跟踪（untracked）。</li>
</ul>
<h3 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h3><ol>
<li>git add file1 file2 file3</li>
<li>git diff (–cached)</li>
<li>git status</li>
<li>git commit (-a)</li>
</ol>
<h3 id="分支与合并"><a href="#分支与合并" class="headerlink" title="分支与合并"></a>分支与合并</h3><ul>
<li>git branch experimental</li>
<li>git branch </li>
<li>git checkout experimental</li>
<li>(edit file)</li>
<li>git commit -a</li>
<li>git checkout master</li>
<li>(edit file)</li>
<li>git commit -a</li>
<li>git merge experimental</li>
<li>git diff</li>
<li>git branch -d experimental</li>
<li>git reset –hard HEAD</li>
</ul>
<h3 id="查看历史"><a href="#查看历史" class="headerlink" title="查看历史"></a>查看历史</h3><ul>
<li>git log v2.5..                   # commits since (not reachable from) v2.5</li>
<li>git log test..master             # commits reachable from master but not test</li>
<li>git log master..test             # commits reachable from test but not master</li>
<li>git log master…test            # commits reachable from either test or master, but not both</li>
<li>git log –since=”2 weeks ago”    # commits from the last 2 weeks</li>
<li>git log Makefile                 # commits that modify Makefile</li>
<li>git log fs/                      # commits that modify any file under fs/</li>
<li>git log -S’foo()’                # commits that add or remove any file data matching the string ‘foo()’</li>
<li>git log –no-merges              # dont show merge commits</li>
</ul>
<h2 id="一些姿势"><a href="#一些姿势" class="headerlink" title="一些姿势"></a>一些姿势</h2><ul>
<li>Git会记录每次提交的全部内容，即snapshot。</li>
<li>提交本身不会记录修改信息，所有修改都是通过与父修改比较的得知。</li>
<li>Git不会显式地记录文件的更名操作。</li>
<li>Commit的注释技巧，标题+正文，中间空行。</li>
<li>如果当前分支和另一个分支没有内容上的差异，git会执行fast forward操作，不创建任何commit，只是将当前分支指向合并进来的分支。</li>
</ul>
<h2 id="一些操作"><a href="#一些操作" class="headerlink" title="一些操作"></a>一些操作</h2><ul>
<li>git show &amp; git ls-tree &amp; git cat-file</li>
<li>git status：查看索引内容。</li>
<li>git init &amp; git clone</li>
<li>git add &amp; git diff &amp; git commit</li>
<li>git branch &amp; git checkout</li>
<li>gitk</li>
<li>git reset –hard HEAD</li>
<li>git log</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;其实用了Git这么久，从当初比较痛苦的看各种Git Flow入门，再到后来自己亲自尝试发现并没有很复杂——在这个过程中，我对Git的本质的理解都源于自身的实践。但是我感觉这是不对的，还是有必要对Git的实现做一些了解，毕竟自己的大型TODO列表中有一个文档中心的设计，还是需要版本控制系统的支持的。再加上最近了解到Google的巨型版本控制系统，所以对VCS的实现产生了一些兴趣。&lt;/p&gt;
&lt;p&gt;于是我就翻出来了这本「Git Book」来看了看。&lt;/p&gt;
&lt;p&gt;当然，这本书并没有详细描述Git本身具体是怎么构建的，但介绍了很多重要的概念和原理。在此总结一下，为以后的工作做个铺垫。&lt;/p&gt;
    
    </summary>
    
      <category term="读书笔记" scheme="http://lhzbxx.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="备忘" scheme="http://lhzbxx.top/tags/%E5%A4%87%E5%BF%98/"/>
    
  </entry>
  
  <entry>
    <title>「Gambade」设计与实现</title>
    <link href="http://lhzbxx.top/2016/07/06/gambade-function-design/"/>
    <id>http://lhzbxx.top/2016/07/06/gambade-function-design/</id>
    <published>2016-07-06T09:52:30.000Z</published>
    <updated>2016-07-06T09:52:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>「」</p>
<a id="more"></a>
<p>node-gyp问题</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「」&lt;/p&gt;
    
    </summary>
    
      <category term="玩具实验室" scheme="http://lhzbxx.top/categories/%E7%8E%A9%E5%85%B7%E5%AE%9E%E9%AA%8C%E5%AE%A4/"/>
    
    
      <category term="Gambade" scheme="http://lhzbxx.top/tags/Gambade/"/>
    
  </entry>
  
  <entry>
    <title>「ThorMark」技术栈</title>
    <link href="http://lhzbxx.top/2016/06/25/thor-mark-tech-stack-and-choice/"/>
    <id>http://lhzbxx.top/2016/06/25/thor-mark-tech-stack-and-choice/</id>
    <published>2016-06-24T19:01:59.000Z</published>
    <updated>2016-06-24T19:01:59.000Z</updated>
    
    <content type="html"><![CDATA[<p>「」</p>
<a id="more"></a>
<p>node-gyp问题</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;「」&lt;/p&gt;
    
    </summary>
    
      <category term="填坑记" scheme="http://lhzbxx.top/categories/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="备忘" scheme="http://lhzbxx.top/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="ThorMark" scheme="http://lhzbxx.top/tags/ThorMark/"/>
    
  </entry>
  
  <entry>
    <title>开发「Follow3」的心得和教训</title>
    <link href="http://lhzbxx.top/2016/06/23/talk-about-experience-in-follow3/"/>
    <id>http://lhzbxx.top/2016/06/23/talk-about-experience-in-follow3/</id>
    <published>2016-06-23T02:53:07.000Z</published>
    <updated>2016-06-23T02:53:07.000Z</updated>
    
    <content type="html"><![CDATA[<p>作为一开始只是一个「能够关注我喜爱的主播」的通知服务的「Follow3」，经过了多次迭代，也在著名游戏论坛NGA上宣传过的Project，现在也迎来了第436位用户。</p>
<p>喂喂喂，讲道理的话，这个数字有点少吧！</p>
<p>咳咳。</p>
<p>但是不管怎么说，这也是我第一次向面向互联网公开个人作品，并且自己还宣传了一波——话说，教练，这算是产品运营吗？当然，之前也发布了很多作品，比如参加黑客马拉松的「EverythingHouse」，O2O的线上产品「QiLe」，以及未实现完成的「DashinGO」，但是都在技术实现上稍微显得有些幼稚吧。</p>
<p>总而言之，「Follow3」可以算作是一次还不错的起点，我觉得可以骄傲地宣称一波我已经入行了。在全栈工程师的歧路上越走越远……</p>
<a id="more"></a>
<h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><h3 id="初衷"><a href="#初衷" class="headerlink" title="初衷"></a>初衷</h3><p>「Follow3」的初衷就是自己想要关注喜欢的网络主播，然后查询他们的开播动态。</p>
<p>很简单的初衷。</p>
<p>后来做成App也是同学的建议，话说到现在Web版都没有呢！</p>
<p>┑(￣Д ￣)┍</p>
<p>就这样喽，年轻人就该任性一下，HIA！</p>
<h3 id="一些数据"><a href="#一些数据" class="headerlink" title="一些数据"></a>一些数据</h3><ul>
<li>名义上来说，这款产品已经有436位注册用户，并且产生了1000条行为数据。</li>
<li>来自极光的统计，留存率大概在15~25%/周。</li>
</ul>
<p>我之前从来没有做过App产品运营，不太清楚这个数值的含义。但是对我来说，只要有用户持续使用我做的东西，我就非常满足了。</p>
<h2 id="教训"><a href="#教训" class="headerlink" title="教训"></a>教训</h2><p>先说一说，这个Project的一些缺憾给我的教训，以免以后再踩同样的坑。</p>
<h3 id="高门槛"><a href="#高门槛" class="headerlink" title="高门槛"></a>高门槛</h3><p>其实这个不是完全无意造成的，这源于当初的一个设定，就是当初这项服务本身的定位是邮箱通知，而不是用户安装App后推送通知。这导致，注册账号并登录是一件相当麻烦的事情。这也造成了一定的壁垒，导致用户不太愿意使用。</p>
<p>然后就是中国人其实不倾向于使用邮箱的，基于邮箱服务对于普通用户来说确实门槛太高了。这让我想起来另一个著名的忠告，就是永远把你的用户当成蠢蛋，他们就是一点学习和领悟能力都没有的傻瓜。</p>
<h3 id="交互"><a href="#交互" class="headerlink" title="交互"></a>交互</h3><p>Web服务本身的数据源的问题，它是自成长的，同时也说明它在起初的数据是不足以提供完善服务的。用户需要手动添加他们感兴趣的主播，但一些性子急的用户可能就发现无法找到自己喜爱的主播，然后直接X掉这个App了。</p>
<p>其实这个解决方案也是有的，就不说系统级别的了，之前也看到有人分享游戏制作的心得，其实对于用户来说，交互与玩法同样重要，甚至交互更为重要。所以如果有任何友好的提示，应该就能大大改善这个问题。</p>
<h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>断断续续开发了将近2个月，要说的话还是蛮多的。</p>
<h3 id="关于开发"><a href="#关于开发" class="headerlink" title="关于开发"></a>关于开发</h3><ul>
<li>技术选型什么的就不说了，几乎是当时唯一的选择。Lumen是我自己想要尝试的后台框架，事实证明它非常棒，优雅而简洁的实现方式，写起来就很爽。而Ionic我曾经使用过，虽然存在着一些问题，但对于开速开发和实现来说是非常有效的。最终应用于Mobile的混合开发框架是Ionic2，虽说是pre-release的版本，但实际用起来还是可以的，其自带的一套样式非常棒，各具平台特色，同时又有统一的API，就这一点来说还是非常Nice的。但有一点不能忍的就是，实体机上的表现bug和性能问题比较严重。</li>
<li>开发方面，特别是迭代开发，到最后的一个阶段的时候，总是绕不过的一个过程是持续集成。然而我的持续集成并不是自动化的，起码对于「Follow3」这个项目来说是这样的。其中夹杂了Git、FTP、SSH的操作，基本上80%靠手工完成——当然，这一点也让我自己非常不满意，因为毕竟不是一个合理的做法。但是，有一说一，这样的持续集成速度并不比自动化的流程更慢，原因很简单：<ol>
<li>环境是预先构建好的，需要使用的框架和第三方库基本已经敲定且本身就比较少，通过Composer和NPM进行管理。</li>
<li>PHP语言本身的动态性，所写即所见，只需要覆盖本身的文件就可以实时看到修改结果。</li>
<li>IDE本身的优越性，使用了WebStorm的特性进行FTP Sync，体验很好，基本上一键就可以看到修改的结果。</li>
</ol>
</li>
<li>关于后续，我希望向里面添加一个较为完整的推荐系统，并优化一些操作，同时提供更多的直播平台数据。</li>
</ul>
<h3 id="关于测试"><a href="#关于测试" class="headerlink" title="关于测试"></a>关于测试</h3><ul>
<li>非常少的测试！这一点是需要我检讨的。</li>
<li>当然，还是有借口来解释这一点的。原因是接口实在太简单了，QA测试通过基本上就没有问题了，借助于Lumen框架本身提供的一些语法糖，单元测试大多数是冗余的。</li>
<li>使用了「Paw」这款软件进行QA测试。这款软件给我的感觉就是，特别特别好，甚至让我产生了一些依赖。具体的功能和好处这里就不细讲了，以后有时间再详细介绍。</li>
</ul>
<h3 id="关于发布"><a href="#关于发布" class="headerlink" title="关于发布"></a>关于发布</h3><ul>
<li>Docker容器部署环境、Jenkins持续集成、自动化打包发布——这些，都没有！这个并不是我不想做，而是受制于时间限制和服务器资源，不得不舍弃一些标准的流程。</li>
<li>苹果开发者证书是真的贵！然而，审核比我想象中要容易，其实最多三天就能够完成一次审核了。即使不通过，原因也写得比较明白，只要改了基本上就能过了。</li>
<li>Google竟然也是需要开发者证书来发布应用的，我还是第一次知道。然后，就是应用宝竟然能够自动抓取网络上的apk资源，真的是非常神奇。当我发现自己的应用在某款装有应用宝的测试机，并且提示更新的时候，我都惊呆了好么！</li>
</ul>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为一开始只是一个「能够关注我喜爱的主播」的通知服务的「Follow3」，经过了多次迭代，也在著名游戏论坛NGA上宣传过的Project，现在也迎来了第436位用户。&lt;/p&gt;
&lt;p&gt;喂喂喂，讲道理的话，这个数字有点少吧！&lt;/p&gt;
&lt;p&gt;咳咳。&lt;/p&gt;
&lt;p&gt;但是不管怎么说，这也是我第一次向面向互联网公开个人作品，并且自己还宣传了一波——话说，教练，这算是产品运营吗？当然，之前也发布了很多作品，比如参加黑客马拉松的「EverythingHouse」，O2O的线上产品「QiLe」，以及未实现完成的「DashinGO」，但是都在技术实现上稍微显得有些幼稚吧。&lt;/p&gt;
&lt;p&gt;总而言之，「Follow3」可以算作是一次还不错的起点，我觉得可以骄傲地宣称一波我已经入行了。在全栈工程师的歧路上越走越远……&lt;/p&gt;
    
    </summary>
    
      <category term="填坑记" scheme="http://lhzbxx.top/categories/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="个人经历" scheme="http://lhzbxx.top/tags/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/"/>
    
      <category term="Follow3" scheme="http://lhzbxx.top/tags/Follow3/"/>
    
  </entry>
  
  <entry>
    <title>「ThorMark」功能设计</title>
    <link href="http://lhzbxx.top/2016/06/22/thor-mark-function-design/"/>
    <id>http://lhzbxx.top/2016/06/22/thor-mark-function-design/</id>
    <published>2016-06-21T19:25:02.000Z</published>
    <updated>2016-06-21T19:25:02.000Z</updated>
    
    <content type="html"><![CDATA[<p>哈哈，喜闻乐见的，我又开坑啦~</p>
<p>这次开的坑名字叫做「ThorMark」，中文名叫做<del>「飞雷神之术」</del>雷印，这个名字的起源于「火影忍者」。简而言之，我希望它能够实现的功能就是对某段文字、某张图片或者某个网页链接打上标签，并随时能够取得到。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>这想法的起源其实是很久之前了。</p>
<p>早在刚开始接触互联网的时候，那时候正流行「Web2.0」的概念。那时候感觉互联网真的是一个大宝库，什么内容、知识、信息，应有尽有，配合搜索引擎，简直瞬间变身全知全能的神。但是有一个问题是，我经常会遇到这样的情形，某天看到一段非常有趣的内容，N天后，想要重新浏览的时候，麻烦就来了。首先我会去历史记录里疯狂翻找，然后再努力回想关键词是什么，尝试搜索一遍又一遍——找到后当然内心非常欣喜，但结果往往是找不到的，然后就非常懊恼。</p>
<p>后来就接触了一些互联网产品，虽然出发点不同，但他们或多或少有些功能或形态的类似，比如印象笔记、Pocket、Instapaper、Readability和美味书签，当然这些工具我没有全部用过，这些工具都一个特点，就是可以存储自己的网络书签的内容，并且基本可以做到随时随地阅读。这里暂且不谈构建个人知识库这样深奥的话题，就论「如何快速找到自己看过的东西」这一问题，我们无疑需要这样的工具。</p>
<p>不得不说，「ThorMark」就是我想要的一款工具。</p>
<p>但是，或许会有人说，现在各种社交平台辣么多，神马朋友圈、微博就不说了，还有各种小的平台，随便拿出来个App可能就有内容分享和用户关注的功能。</p>
<p>但是、但是，等一下，我想要的不止这些。</p>
<h3 id="预期"><a href="#预期" class="headerlink" title="预期"></a>预期</h3><p>我想要一个以社会化标签为基础的个人知识库的管理。</p>
<p>我想要主动地去分享自己要给某个圈子或者某个人看的东西。</p>
<p>我想要随时随地能够搜索我看过并收藏的东西。</p>
<p>我希望了解别人都在关注些什么、看了哪些有价值的东西。</p>
<p>我希望更加便捷地去分享，而不需要手动输入账号或密码的操作。</p>
<h3 id="形态"><a href="#形态" class="headerlink" title="形态"></a>形态</h3><p>移动端App肯定是有的，其次我要将浏览器插件和PC客户端列入重要的项目中。</p>
<p>也就是说这是一个全平台的项目。</p>
<p>有些任重而道远。</p>
<p>但我会努力的。</p>
<p>根据时间规划，优先级大概是：Browser Plugin &gt; Mobile Application &gt; PC Client。</p>
<h3 id="技术选型"><a href="#技术选型" class="headerlink" title="技术选型"></a>技术选型</h3><p>服务端方面，以Node.js为基础，暂时考虑Koa2+MongoDB，以Socket.io作消息推送，ElasticSearch做全文搜索。</p>
<p>客户端方面，PC Client用Electron，Mobile Application用React Native，至于Browser Plugin，肯定也是JS了，所以这样基本上从微服务核心到各平台客户端是以JavaScript全栈。</p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="社会化标签"><a href="#社会化标签" class="headerlink" title="社会化标签"></a>社会化标签</h3><p>标签，或者说「Tag」是重中之重，以大众分类法为基础，构建一套群体化的标签体系，这也是我想要达到的目的。</p>
<p>最终想要实现的效果是，我分享一个链接或图片，可以自动打上较为正确的Tag。</p>
<h3 id="社交圈"><a href="#社交圈" class="headerlink" title="社交圈"></a>社交圈</h3><p>你可以关注某个人，并在TimeLine上看到他公开的书签内容。</p>
<p>你可以构建属于自己的圈子，并且自由地向不同的圈子分享自己觉得有趣或有用的内容。</p>
<p>你可以看到有多少人同样分享了某个链接或图片。</p>
<h3 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h3><p>我希望能够有一个类似OAuth2管理系统，你可以通过个人主页管理不同平台上的Token。</p>
<p>Token的作用就是个人身份的象征，你可以随时撤销某个Token或生成一个新的Token，并且将它作为独一无二的身份象征。</p>
<p>然后借助Token，可以实现一些非常Fantasy的功能。</p>
<p>用户可以自定义流程，实现更加智能和自动化的分享。</p>
<p>举个栗子，你可以把你的某个Token交给某个Application，然后Application就可以根据你的个人信息做一些非常有意思的事情。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>功能设计大体就是这样了。</p>
<p>用户可以操作的行为有：收藏图/文/链接、关注某人、建立圈子、分享、打标签、全文搜索、OAuth2管理。</p>
<p>至于一些细节之后再拾遗吧。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;哈哈，喜闻乐见的，我又开坑啦~&lt;/p&gt;
&lt;p&gt;这次开的坑名字叫做「ThorMark」，中文名叫做&lt;del&gt;「飞雷神之术」&lt;/del&gt;雷印，这个名字的起源于「火影忍者」。简而言之，我希望它能够实现的功能就是对某段文字、某张图片或者某个网页链接打上标签，并随时能够取得到。&lt;/p&gt;
    
    </summary>
    
      <category term="填坑记" scheme="http://lhzbxx.top/categories/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="ThorMark" scheme="http://lhzbxx.top/tags/ThorMark/"/>
    
  </entry>
  
  <entry>
    <title>「Save+」功能设计</title>
    <link href="http://lhzbxx.top/2016/06/13/save-function-design/"/>
    <id>http://lhzbxx.top/2016/06/13/save-function-design/</id>
    <published>2016-06-12T19:49:18.000Z</published>
    <updated>2016-06-12T19:49:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>不得不承认，我挖坑能力确实一流，总是会有灵光一现的想法，就忍不住要去实现，仿佛中了毒似的，一时填不了坑就心里痒痒。Github上的Repository已经多到令人发指了，再不填坑就人神共愤了！想想还有很多Fantasy的东西要去做，还是有点小激动呢！</p>
<p>好了，不扯这么多了，今天要填的坑叫做「Save+」。</p>
<p>关于「Save+」本身，可以理解为一个简约而不简单的记账平台。</p>
<a id="more"></a>
<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>和「<a href="https://github.com/lhzbxx/Follow3" target="_blank" rel="external">Follow3</a>」不太一样的是，其实我自身对于记账的需求并不大，像我这种粗枝大叶，零钱到处丢的人，记账简直就是一种折磨啊！</p>
<p>但是我做这样一个记账的平台是为了什么呢？</p>
<ol>
<li>一个很弱智的理由是，我只是想用Java为后端框架做一个Project。</li>
<li>想使用原生App来实现前端，而制作复杂度过高的App可能会花费太多时间在Feature上，例如「<a href="https://github.com/lhzbxx/Xian" target="_blank" rel="external">搬山客</a>」图像识别的引入。</li>
<li>确实还有点意义的Feature，只不过重点在于后端的实现。</li>
<li>想要尝试一套更加规范的业务流程和构建体系。</li>
<li>现在流行的记账软件，都特别可怕，功能看起来特别复杂，我看着都不敢记！</li>
</ol>
<h3 id="构想"><a href="#构想" class="headerlink" title="构想"></a>构想</h3><p>在Github上，我对这个Project的简介写的是：</p>
<blockquote class="blockquote-center"><p>共享账本、快速收录、预算报表，养成省钱好习惯。 </p>
</blockquote>
<p>所谓的「Save+」也是暗指「省钱」，似乎所有的记账类应用都有这个倾向，就是「Save Your Money」，然而它只是挂出了你剁手的记录，顺便记录你可怜的收入，让你安心地吃土罢了。</p>
<p>不过吃土归吃土，人还是要开心地活着嘛！</p>
<h2 id="功能设计"><a href="#功能设计" class="headerlink" title="功能设计"></a>功能设计</h2><h3 id="预算与报表"><a href="#预算与报表" class="headerlink" title="预算与报表"></a>预算与报表</h3><p>先说预算，预算是用户设定的一个值，一般来说涉及到预算的交互也就是提醒用户的支出接近或已超过上限。</p>
<p>再说报表，作为记账类应用的传统——毕竟记了这么多东西，没有个直观的界面还记个屁啊，根本没有动力啊有木有！据我所知，现在的记账类应用的图表无外乎以下两种：</p>
<ol>
<li>根据收支类型区分，显示各项百分比的饼图。</li>
<li>根据时间排序，记录单位时间内收支情况的条形图或折线图。</li>
</ol>
<h3 id="账本共享"><a href="#账本共享" class="headerlink" title="账本共享"></a>账本共享</h3><p>收支与账本的分离，意味着用户可以随意支配收支，可以将它插入到任意多的账本中——但唯一不变的，就是用户总体的流水信息。而账本是随着情景不同而随意改变的，</p>
<p>所以，实现账本共享可以应对这样的场景需求：</p>
<ol>
<li>新建的团队管理资金流动和去向。</li>
<li>亲密的群体（情侣或家人）之间一起记录，增进感情。</li>
<li>公共组织可以公开自身的账本，明确资金去向。</li>
</ol>
<p>此外，账本还是人物关系的纽带，账本的创建者同时也可以理解为一个群组的头头。头头可以邀请其他人进入群组，并赋予他们不同的权限。</p>
<h3 id="交换协议"><a href="#交换协议" class="headerlink" title="交换协议"></a>交换协议</h3><p>这个想法有点大胆，感觉更可能是空想。因为受到「RFC 5545」，也就是「ICalendar」的启发，我更倾向于将收支这一部分的数据交换制定为标准协议。</p>
<p>但对于单个平台来说，一个标准的格式交换协议还是必需的。</p>
<p>我所期望的效果是，构建一个高兼容性的交换协议，支持该协议的平台可以传输和处理同样的收支业务。制定这样一种标准协议还是非常有趣的工作——虽然听上去很枯燥。</p>
<h3 id="IOU"><a href="#IOU" class="headerlink" title="IOU"></a>IOU</h3><p>IOU就是「I Own You」的简称。</p>
<p>这个功能所要解决的场景就是AA分账、借钱或者集资的时候，优雅地请对方贡献自己的力量。</p>
<p>讲述一个具体的情形，比如说一群人一起租房子，交租金的时候，群组的头头发起一个IOU，然后确定每个人的份额，并可以规定审核人，接着每个人还清自己的一份后，审核人确认，就完成了一次IOU。</p>
<h3 id="好友"><a href="#好友" class="headerlink" title="好友"></a>好友</h3><p>其实一开始想到加入社交功能时，我是拒绝的。</p>
<p>因为社交真的很烦啊——不仅仅是做一个联系人这么简单，而是有了联系人就必然有其它的需求——到了最后，就做成另一个微信了。</p>
<p>所以，在这里要规定，也是警醒自己，好友只有下面两个功能：</p>
<ol>
<li>催还IOU、提醒审核、申请报销或其它个人通知。</li>
<li>查看两人之间的债务关系和金钱往来。</li>
</ol>
<h3 id="愿望单"><a href="#愿望单" class="headerlink" title="愿望单"></a>愿望单</h3><p>不管怎样，我似乎是有一点收集癖的。我就不说我Steam里的愿望单有多少东西了，还有一些有意思的小玩意儿，虽然不一定真的去买，但是真的很有趣啊！当然，我才不会说如果有人帮我买，我会特别特别乐意接受的。</p>
<p>每一个成熟的购物平台都是有「愿望单」这个功能的，淘宝的购物车、Amazon的心愿单还有Steam的WishList，不一而足，但是整合的、具有完善功能的平台似乎还没有——或者有，但是我没有发现。</p>
<p>愿望单的功能是什么：</p>
<ol>
<li>记录自己想要的东西，这是最基础的功能啦，就当是一个备忘录。</li>
<li>秀给别人看，不管是纯粹的秀逼格和财富，还是隐晦地乞讨。</li>
<li>如果可以的话，动态地查看商品价格的浮动自然是最好的，来个降价通知简直Perfect。</li>
<li>快速添加！想要实现的Feature是，只需要一个来自主流电商的链接，就可以将其快速录入愿望单中。</li>
</ol>
<h3 id="文本分析"><a href="#文本分析" class="headerlink" title="文本分析"></a>文本分析</h3><p>这是一个很有趣的Feature，即已经火了很多年的自然语义解析。我想做到的效果就是，随便摘录一段和收支有关的语句，就可以实现自动录入流水。</p>
<p>在此基础上，借助于语音识别，还可以实现录音记账。</p>
<h3 id="第三方账号"><a href="#第三方账号" class="headerlink" title="第三方账号"></a>第三方账号</h3><p>绑定第三方账号，然后自动导入用户的收支是一个看似很美好的Feature。主要有三个方面的制约：</p>
<ol>
<li>平台本身的API不全，或不好用，或压根儿没有。</li>
<li>用户对账号的敏感性，不太愿意绑定第三方账号。</li>
<li>就算绑定好了，导入的规则用户可能不满意。</li>
</ol>
<p>所以这一功能就暂且留着。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>功能设计大体就是这样了。</p>
<p>至于一些细节之后再拾遗吧。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;不得不承认，我挖坑能力确实一流，总是会有灵光一现的想法，就忍不住要去实现，仿佛中了毒似的，一时填不了坑就心里痒痒。Github上的Repository已经多到令人发指了，再不填坑就人神共愤了！想想还有很多Fantasy的东西要去做，还是有点小激动呢！&lt;/p&gt;
&lt;p&gt;好了，不扯这么多了，今天要填的坑叫做「Save+」。&lt;/p&gt;
&lt;p&gt;关于「Save+」本身，可以理解为一个简约而不简单的记账平台。&lt;/p&gt;
    
    </summary>
    
      <category term="填坑记" scheme="http://lhzbxx.top/categories/%E5%A1%AB%E5%9D%91%E8%AE%B0/"/>
    
    
      <category term="Save+" scheme="http://lhzbxx.top/tags/Save/"/>
    
  </entry>
  
  <entry>
    <title>「Redefined」搭建与部署</title>
    <link href="http://lhzbxx.top/2016/06/10/blog-flow-and-deploy/"/>
    <id>http://lhzbxx.top/2016/06/10/blog-flow-and-deploy/</id>
    <published>2016-06-09T17:51:51.000Z</published>
    <updated>2016-06-10T09:30:27.000Z</updated>
    
    <content type="html"><![CDATA[<p>关于开发那些事儿，其实蛮多想说的。自己也总结了一些干货，涉及到各个方面，虽然大多数来自前人的经验，但也有一些自己的东西。</p>
<p>不过从哪开始呢，还真是有点纠结。</p>
<p>虽然看过很多大牛的分享，但自己着实写的比较少。那就先从构建和部署本博客开始吧，从简单的写起练练手，同时也算作一个备忘。</p>
<a id="more"></a>
<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><h3 id="依赖"><a href="#依赖" class="headerlink" title="依赖"></a>依赖</h3><p>Redefined是基于Hexo，并使用第三方主题NexT构建的。</p>
<p>这里就不再赘述Hexo+NexT的优点了。</p>
<p>很久之前我是想自己手动搭建博客的，不过实在太费事了，人生苦短，没必要什么都自己来。况且Hexo这个轮子本身质量还是不错的，起码有完整的社区和足够的开发人员，就易用性和简洁度来说，自己做的还真比不上它。</p>
<p>在你搭建之前，需要准备两个东西。</p>
<ul>
<li>Git</li>
<li>Node.js</li>
</ul>
<p>Hexo是基于Node构建的，使用NPM进行包管理，理论上来说你只需要一个「package.json」就OK啦。</p>
<h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ npm install hexo-cli -g</div><div class="line">$ hexo init blog</div></pre></td></tr></table></figure>
<h3 id="工作流"><a href="#工作流" class="headerlink" title="工作流"></a>工作流</h3><p>我一直挺喜欢「Workflow」这个词，觉得它挺酷的。就像是在玩Minecraft一样，那种从无到有、慢慢地、有序地创造一个世界的感觉，非常美妙。</p>
<p>稍微扯远了。</p>
<p>就简单说一下博客到底怎么运行的——我是这么做的：</p>
<ol>
<li><p>创建一篇新的文章</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new post xxx</div></pre></td></tr></table></figure>
</li>
<li><p>编辑文字</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vim xxx</div></pre></td></tr></table></figure>
</li>
<li><p>（可选）本地测试</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
</li>
<li><p>生成静态文件</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
</li>
<li><p>发布到远程服务器</p>
 <figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
</li>
</ol>
<p>当然，这是把配置都抛到了一边，从本质上来说，你只需要两步就可以完成。</p>
<p>第一步，用Markdown编辑好一篇文章，放在/source/_post目录下。</p>
<p>第二步，双击piu.sh.</p>
<p>其中「piu.sh」是blog目录下的文件。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo generate --deploy</div></pre></td></tr></table></figure>
<p>就是这么简单。</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>这一块其实是内容最多的，我花了蛮久的时间在配置项上。</p>
<p>不过这真的只是纯粹的体力活，按照文档说明，是没有任何问题的，除非你看走眼了……</p>
<p>我个人用的第三方服务有：</p>
<ul>
<li>多说</li>
<li>百度统计</li>
<li>Swiftype</li>
</ul>
<h3 id="服务器"><a href="#服务器" class="headerlink" title="服务器"></a>服务器</h3><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>默认会在 <a href="http://localhost:4000" target="_blank" rel="external">http://localhost:4000</a> 下预览。</p>
<h3 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h3><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>Hexo生成的静态文件全都放在/public目录下。</p>
<p>最粗暴的部署方式就是直接把下面的文件拿出来，丢在服务器上，然后用Nginx服务器处理请求。</p>
<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>这个部署还是要提前设置的。</p>
<p>我个人使用了两种部署，一是Git，二是rsync。</p>
<p>有一些工作需要提前做好，比如说在远程服务器上部署SSH访问。</p>
<p>按照文档，把所有该填的东西都填好，没有什么问题。</p>
<p>可能还有一个小坑吧，起码在目前（2016-06-10）没有修复的bug，就是rsync的配置一定要填全，最好不要遗漏，否则提示同步成功却实际上屁事没干。</p>
<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="报错"><a href="#报错" class="headerlink" title="报错"></a>报错</h3><p>我遇见过的错误除却端口被占用这样很明显的错误外，还有一种比较常见，不过不是很好定位的问题。</p>
<p>「JS-YAML: can not read a block mapping entry;」</p>
<p>这种错误有两种可能：</p>
<ol>
<li>_config.yml有问题，仔细检查一下，可能是一项配置了两次或拼写问题。</li>
<li>新建的page或post有问题，查看是否符合格式要求，可以和默认的对比一下，一般都能发现问题所在。</li>
</ol>
<h3 id="分类和标签"><a href="#分类和标签" class="headerlink" title="分类和标签"></a>分类和标签</h3><p>删掉分类和标签的话，会出现分类和标签统计错误的情况。</p>
<p>很好解决，直接重新生成即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ hexo clean</div><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<h3 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h3><p>详细的配置和说明需要查看：<a href="https://hexo.io/zh-cn/docs/" target="_blank" rel="external">Hexo</a>和<a href="http://theme-next.iissnan.com/" target="_blank" rel="external">Next</a>.</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于开发那些事儿，其实蛮多想说的。自己也总结了一些干货，涉及到各个方面，虽然大多数来自前人的经验，但也有一些自己的东西。&lt;/p&gt;
&lt;p&gt;不过从哪开始呢，还真是有点纠结。&lt;/p&gt;
&lt;p&gt;虽然看过很多大牛的分享，但自己着实写的比较少。那就先从构建和部署本博客开始吧，从简单的写起练练手，同时也算作一个备忘。&lt;/p&gt;
    
    </summary>
    
      <category term="开发手札" scheme="http://lhzbxx.top/categories/%E5%BC%80%E5%8F%91%E6%89%8B%E6%9C%AD/"/>
    
    
      <category term="备忘" scheme="http://lhzbxx.top/tags/%E5%A4%87%E5%BF%98/"/>
    
      <category term="Hexo" scheme="http://lhzbxx.top/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>你好，世界！</title>
    <link href="http://lhzbxx.top/2016/06/09/hello-world/"/>
    <id>http://lhzbxx.top/2016/06/09/hello-world/</id>
    <published>2016-06-09T06:58:42.000Z</published>
    <updated>2017-03-02T04:03:47.978Z</updated>
    
    <content type="html"><![CDATA[<p>很久很久以前，一只猿行走在岸边，观察着河水流动的韵律，感受到了自己智慧的升华。那一刻，他仿佛得到了大自然的拥抱，与万物相连相通；又恍若见到了天神下凡，赐予他伟大的力量。</p>
<p>然后，他说出了那句后代的猿们奉为至高智慧传承的经典台词：</p>
<blockquote class="blockquote-center"><p>Hello, World! </p>
</blockquote>
<a id="more"></a>
<p>以上都是疯话。</p>
<p>「Hello World」是编程界的传统，以至于我也不得不拿它起个头，作为我博客的开端。</p>
<p>实际上我一直想写一些文字，记录自己的生活或是成长。</p>
<p>其实很久很久以前，在我还没成为一只程序猿的时候，大概还在上小学的时候，我就特别喜欢写小说——虽然经常一个字都蹦不出来，但是坐在椅子上、两眼放空，试着去重现脑海的幻想，并把它记录下来。然而幻想经常捕捉不到，更不用提及用自己苍白无力的语言去描述了。</p>
<p>后来上了中学，自以为意识觉醒，懂了很多很多东西，开始写一些小杂文，还跟着同学们高谈阔论，特别了不起的样子，还时常效仿古人以诗会友，拿着不知道哪弄来的小本子，东拼西凑一些看起来还挺漂亮的字句。</p>
<p>确实蛮幼稚的，不过也挺好玩儿的。</p>
<p>不过在我个人精神的成分中，有一些完美主义的元素，所以如果我写的不好，就干脆撕掉重来，但是本子撕掉以后也不完美了——这就是我众多开头全是残页的本子的原因。</p>
<p>我还是相信我有着超越常人的创作天赋的，只是大概不在文字层面。</p>
<p>我觉得我自己经历了三个“野蛮生长”的时期。</p>
<p>一是初中的时候，患上了过敏性紫癜，吃了激素，一个月内胖成了球状，但也着实长高了不少——尽管后来个子也不高，但这不重要，当时的感觉就像是吃了变大药水，横向、纵向同时扩张。</p>
<p>二是高中伊始，没有过多高考的压力，又考上了本地的重点高中，接触了以前从来没有接触过的领域，比如说音乐和电影——说起来有点可笑，在我印象中，我确实是在高中时候第一次戴上耳机去听歌。又用以名义上用来学习的MP4恶补了很多经典的美剧和电影。前面提到过，我在这个年龄段还经常写一些字词拼凑的古诗，除此之外还尝试了画漫画，真是文艺范十足啊！</p>
<p>三就是大学时代，成为了一只程序猿，说实话我也不知道当初是如何从众多学院选择了电子信息与电气工程，又从六大专业里选择了计算机科学与工程的。我之前对计算机最大的爱好应该就是玩游戏，如果说有一点点优势的话，大概是很早接触了键盘，打字速度比较快，又学习了一些浅显到连入门都不算的Flash。但是，人成长的速度确实很快很快。几乎不到两年时间，我已经是一名起码定义上来说的全栈工程师了。至于我是如何启蒙的、又是如何成长的，这个以后有时间再写吧，总而言之，大学里的四年，确实给了我很多很多东西。</p>
<p>话说回来，经过这三次成长，我觉得我的本质没有改变。我还是那个我，有点完美主义，有点好强，有点聪明，带点小骄傲的男人。</p>
<p>我特别喜欢「自洽」这一词语，感觉它拥有魔力，让人着迷。</p>
<p>所以，我喜欢设定奇妙的框架，之前我一直想往框架里填一些故事——有人告诉我，你设定框架却写不来故事，不就跟「就差一个程序员」一样了么？我后来想想，有道理，但问题是我就他喵的恰好是一个程序猿啊！</p>
<p>我曾经红着脸翻了翻我以前写的东西或者说是感想，说实话挺蠢萌的。但人成长的过程，不就是不断认识到自己傻逼的过程么？</p>
<p>故此，我以这篇日志开头，开始记录自己，也为以后留下一些东西。至于内容嘛，就不确定啦，可能是个人感想，也可能是开发笔记，也有可能是我要讲的幻想故事。</p>
<hr>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;很久很久以前，一只猿行走在岸边，观察着河水流动的韵律，感受到了自己智慧的升华。那一刻，他仿佛得到了大自然的拥抱，与万物相连相通；又恍若见到了天神下凡，赐予他伟大的力量。&lt;/p&gt;
&lt;p&gt;然后，他说出了那句后代的猿们奉为至高智慧传承的经典台词：&lt;/p&gt;
&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;Hello, World! &lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="随想录" scheme="http://lhzbxx.top/categories/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
    
      <category term="个人经历" scheme="http://lhzbxx.top/tags/%E4%B8%AA%E4%BA%BA%E7%BB%8F%E5%8E%86/"/>
    
  </entry>
  
</feed>
